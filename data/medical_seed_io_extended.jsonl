{"snippet": "def f(respiratory_rates, timestamps):\n    # Respiratory Rate Trend Analysis\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, respiratory_rates, 'g-', linewidth=2, marker='s', markersize=6)\n    plt.axhline(y=12, color='g', linestyle='--', alpha=0.7, label='Normal lower (12/min)')\n    plt.axhline(y=20, color='g', linestyle='--', alpha=0.7, label='Normal upper (20/min)')\n    plt.axhline(y=24, color='orange', linestyle='--', alpha=0.7, label='Tachypnea (>20/min)')\n    \n    plt.title('Respiratory Rate Trend')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Respiratory Rate (breaths/min)')\n    plt.grid(True, alpha=0.3)\n    plt.legend()\n    \n    # Analysis\n    mean_rr = np.mean(respiratory_rates)\n    abnormal_readings = sum(1 for rr in respiratory_rates if rr < 12 or rr > 20)\n    \n    if any(rr > 24 for rr in respiratory_rates):\n        status = 'Tachypnea detected - assess for respiratory distress'\n    elif any(rr < 10 for rr in respiratory_rates):\n        status = 'Bradypnea detected - assess respiratory status'\n    elif abnormal_readings > 0:\n        status = 'Some abnormal readings - monitor closely'\n    else:\n        status = 'Normal respiratory pattern'\n    \n    return {\n        'mean_respiratory_rate': round(mean_rr, 1),\n        'abnormal_readings': abnormal_readings,\n        'status': status\n    }", "input": "[16, 18, 22, 26, 24, 20, 18, 16], [0, 1, 2, 3, 4, 5, 6, 7]", "output": "{'mean_respiratory_rate': 20.0, 'abnormal_readings': 3, 'status': 'Tachypnea detected - assess for respiratory distress'}", "imports": ["import matplotlib.pyplot as plt", "import numpy as np"], "original_snippet": "def f(respiratory_rates, timestamps):\n    # Respiratory Rate Trend Analysis\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, respiratory_rates, 'g-', linewidth=2, marker='s', markersize=6)\n    plt.axhline(y=12, color='g', linestyle='--', alpha=0.7, label='Normal lower (12/min)')\n    plt.axhline(y=20, color='g', linestyle='--', alpha=0.7, label='Normal upper (20/min)')\n    plt.axhline(y=24, color='orange', linestyle='--', alpha=0.7, label='Tachypnea (>20/min)')\n    \n    plt.title('Respiratory Rate Trend')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Respiratory Rate (breaths/min)')\n    plt.grid(True, alpha=0.3)\n    plt.legend()\n    \n    # Analysis\n    mean_rr = np.mean(respiratory_rates)\n    abnormal_readings = sum(1 for rr in respiratory_rates if rr < 12 or rr > 20)\n    \n    if any(rr > 24 for rr in respiratory_rates):\n        status = 'Tachypnea detected - assess for respiratory distress'\n    elif any(rr < 10 for rr in respiratory_rates):\n        status = 'Bradypnea detected - assess respiratory status'\n    elif abnormal_readings > 0:\n        status = 'Some abnormal readings - monitor closely'\n    else:\n        status = 'Normal respiratory pattern'\n    \n    return {\n        'mean_respiratory_rate': round(mean_rr, 1),\n        'abnormal_readings': abnormal_readings,\n        'status': status\n    }", "composite_functions": []}
{"snippet": "def f(temperatures_celsius, timestamps, route):\n    # Temperature Monitoring and Analysis\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Convert to Fahrenheit if needed for display\n    temps_fahrenheit = [c * 9/5 + 32 for c in temperatures_celsius]\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, temperatures_celsius, 'r-', linewidth=2, marker='o')\n    plt.axhline(y=37.0, color='g', linestyle='--', alpha=0.7, label='Normal (37°C)')\n    plt.axhline(y=38.0, color='orange', linestyle='--', alpha=0.7, label='Low fever (38°C)')\n    plt.axhline(y=39.0, color='r', linestyle='--', alpha=0.7, label='High fever (39°C)')\n    \n    plt.title(f'Temperature Trend ({route} route)')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Temperature (°C)')\n    plt.grid(True, alpha=0.3)\n    plt.legend()\n    \n    # Temperature assessment\n    max_temp = max(temperatures_celsius)\n    min_temp = min(temperatures_celsius)\n    fever_hours = sum(1 for temp in temperatures_celsius if temp >= 38.0)\n    \n    if max_temp >= 40.0:\n        status = 'High fever - immediate medical attention'\n    elif max_temp >= 39.0:\n        status = 'Moderate to high fever - monitor closely'\n    elif max_temp >= 38.0:\n        status = 'Low-grade fever detected'\n    elif min_temp < 36.0:\n        status = 'Hypothermia concern - assess patient'\n    else:\n        status = 'Normal temperature range'\n    \n    return {\n        'max_temp_celsius': round(max_temp, 1),\n        'min_temp_celsius': round(min_temp, 1),\n        'fever_hours': fever_hours,\n        'status': status,\n        'route': route\n    }", "input": "[36.8, 37.2, 37.8, 38.5, 39.1, 38.9, 38.2, 37.6], [0, 2, 4, 6, 8, 10, 12, 14], 'oral'", "output": "{'max_temp_celsius': 39.1, 'min_temp_celsius': 36.8, 'fever_hours': 5, 'status': 'Moderate to high fever - monitor closely', 'route': 'oral'}", "imports": ["import matplotlib.pyplot as plt", "import numpy as np"], "original_snippet": "def f(temperatures_celsius, timestamps, route):\n    # Temperature Monitoring and Analysis\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Convert to Fahrenheit if needed for display\n    temps_fahrenheit = [c * 9/5 + 32 for c in temperatures_celsius]\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, temperatures_celsius, 'r-', linewidth=2, marker='o')\n    plt.axhline(y=37.0, color='g', linestyle='--', alpha=0.7, label='Normal (37°C)')\n    plt.axhline(y=38.0, color='orange', linestyle='--', alpha=0.7, label='Low fever (38°C)')\n    plt.axhline(y=39.0, color='r', linestyle='--', alpha=0.7, label='High fever (39°C)')\n    \n    plt.title(f'Temperature Trend ({route} route)')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Temperature (°C)')\n    plt.grid(True, alpha=0.3)\n    plt.legend()\n    \n    # Temperature assessment\n    max_temp = max(temperatures_celsius)\n    min_temp = min(temperatures_celsius)\n    fever_hours = sum(1 for temp in temperatures_celsius if temp >= 38.0)\n    \n    if max_temp >= 40.0:\n        status = 'High fever - immediate medical attention'\n    elif max_temp >= 39.0:\n        status = 'Moderate to high fever - monitor closely'\n    elif max_temp >= 38.0:\n        status = 'Low-grade fever detected'\n    elif min_temp < 36.0:\n        status = 'Hypothermia concern - assess patient'\n    else:\n        status = 'Normal temperature range'\n    \n    return {\n        'max_temp_celsius': round(max_temp, 1),\n        'min_temp_celsius': round(min_temp, 1),\n        'fever_hours': fever_hours,\n        'status': status,\n        'route': route\n    }", "composite_functions": []}
{"snippet": "def f(weight_kg, height_cm, age):\n    # BMI Calculation and Assessment\n    import math\n    \n    # Calculate BMI\n    height_m = height_cm / 100\n    bmi = weight_kg / (height_m ** 2)\n    \n    # BMI Categories for adults (≥20 years)\n    if age >= 20:\n        if bmi < 18.5:\n            category = 'Underweight'\n            health_risk = 'Malnutrition risk'\n        elif bmi < 25:\n            category = 'Normal weight'\n            health_risk = 'Low risk'\n        elif bmi < 30:\n            category = 'Overweight'\n            health_risk = 'Increased risk'\n        elif bmi < 35:\n            category = 'Obese Class I'\n            health_risk = 'High risk'\n        elif bmi < 40:\n            category = 'Obese Class II'\n            health_risk = 'Very high risk'\n        else:\n            category = 'Obese Class III'\n            health_risk = 'Extremely high risk'\n    else:\n        # For pediatric patients, use age-adjusted categories\n        category = 'Pediatric assessment required'\n        health_risk = 'Use growth charts for pediatric assessment'\n    \n    # Calculate ideal body weight (Devine formula for adults)\n    if age >= 18:\n        # Assuming average height, this is simplified\n        if height_cm >= 152:  # Assuming male if tall\n            ideal_weight = 50 + 2.3 * ((height_cm - 152.4) / 2.54)\n        else:\n            ideal_weight = 45.5 + 2.3 * ((height_cm - 152.4) / 2.54)\n        \n        weight_status = 'normal' if abs(weight_kg - ideal_weight) / ideal_weight < 0.2 else 'abnormal'\n    else:\n        ideal_weight = None\n        weight_status = 'pediatric'\n    \n    return {\n        'bmi': round(bmi, 1),\n        'category': category,\n        'health_risk': health_risk,\n        'ideal_weight_kg': round(ideal_weight, 1) if ideal_weight else None,\n        'weight_status': weight_status\n    }", "input": "70, 175, 35", "output": "{'bmi': 22.9, 'category': 'Normal weight', 'health_risk': 'Low risk', 'ideal_weight_kg': 72.1, 'weight_status': 'normal'}", "imports": ["import math"], "original_snippet": "def f(weight_kg, height_cm, age):\n    # BMI Calculation and Assessment\n    import math\n    \n    # Calculate BMI\n    height_m = height_cm / 100\n    bmi = weight_kg / (height_m ** 2)\n    \n    # BMI Categories for adults (≥20 years)\n    if age >= 20:\n        if bmi < 18.5:\n            category = 'Underweight'\n            health_risk = 'Malnutrition risk'\n        elif bmi < 25:\n            category = 'Normal weight'\n            health_risk = 'Low risk'\n        elif bmi < 30:\n            category = 'Overweight'\n            health_risk = 'Increased risk'\n        elif bmi < 35:\n            category = 'Obese Class I'\n            health_risk = 'High risk'\n        elif bmi < 40:\n            category = 'Obese Class II'\n            health_risk = 'Very high risk'\n        else:\n            category = 'Obese Class III'\n            health_risk = 'Extremely high risk'\n    else:\n        # For pediatric patients, use age-adjusted categories\n        category = 'Pediatric assessment required'\n        health_risk = 'Use growth charts for pediatric assessment'\n    \n    # Calculate ideal body weight (Devine formula for adults)\n    if age >= 18:\n        # Assuming average height, this is simplified\n        if height_cm >= 152:  # Assuming male if tall\n            ideal_weight = 50 + 2.3 * ((height_cm - 152.4) / 2.54)\n        else:\n            ideal_weight = 45.5 + 2.3 * ((height_cm - 152.4) / 2.54)\n        \n        weight_status = 'normal' if abs(weight_kg - ideal_weight) / ideal_weight < 0.2 else 'abnormal'\n    else:\n        ideal_weight = None\n        weight_status = 'pediatric'\n    \n    return {\n        'bmi': round(bmi, 1),\n        'category': category,\n        'health_risk': health_risk,\n        'ideal_weight_kg': round(ideal_weight, 1) if ideal_weight else None,\n        'weight_status': weight_status\n    }", "composite_functions": []}
{"snippet": "def f(drug_name, weight_kg, desired_dose_mg_per_kg, concentration_mg_per_ml):\n    # Pediatric Drug Dosage Calculation\n    \n    # Calculate total dose needed\n    total_dose_mg = weight_kg * desired_dose_mg_per_kg\n    \n    # Calculate volume to administer\n    volume_ml = total_dose_mg / concentration_mg_per_ml\n    \n    # Safety checks\n    safety_warnings = []\n    \n    # Common pediatric dosing limits (simplified examples)\n    max_doses = {\n        'acetaminophen': 15,  # mg/kg/dose\n        'ibuprofen': 10,      # mg/kg/dose\n        'amoxicillin': 50,    # mg/kg/dose\n        'azithromycin': 10    # mg/kg/dose\n    }\n    \n    drug_lower = drug_name.lower()\n    if drug_lower in max_doses:\n        if desired_dose_mg_per_kg > max_doses[drug_lower]:\n            safety_warnings.append(f'Dose exceeds recommended maximum for {drug_name}')\n    \n    # Volume safety check\n    if volume_ml > 20:\n        safety_warnings.append('Large volume - consider dividing dose')\n    \n    # Weight-based safety\n    if weight_kg < 2:\n        safety_warnings.append('Neonatal patient - verify dosing guidelines')\n    elif weight_kg > 100:\n        safety_warnings.append('Consider adult dosing protocols')\n    \n    return {\n        'drug': drug_name,\n        'patient_weight_kg': weight_kg,\n        'dose_per_kg': desired_dose_mg_per_kg,\n        'total_dose_mg': round(total_dose_mg, 1),\n        'volume_to_give_ml': round(volume_ml, 2),\n        'concentration_used': f'{concentration_mg_per_ml} mg/mL',\n        'safety_warnings': safety_warnings\n    }", "input": "'Acetaminophen', 25, 12, 160", "output": "{'drug': 'Acetaminophen', 'patient_weight_kg': 25, 'dose_per_kg': 12, 'total_dose_mg': 300.0, 'volume_to_give_ml': 1.88, 'concentration_used': '160 mg/mL', 'safety_warnings': []}", "imports": [], "original_snippet": "def f(drug_name, weight_kg, desired_dose_mg_per_kg, concentration_mg_per_ml):\n    # Pediatric Drug Dosage Calculation\n    \n    # Calculate total dose needed\n    total_dose_mg = weight_kg * desired_dose_mg_per_kg\n    \n    # Calculate volume to administer\n    volume_ml = total_dose_mg / concentration_mg_per_ml\n    \n    # Safety checks\n    safety_warnings = []\n    \n    # Common pediatric dosing limits (simplified examples)\n    max_doses = {\n        'acetaminophen': 15,  # mg/kg/dose\n        'ibuprofen': 10,      # mg/kg/dose\n        'amoxicillin': 50,    # mg/kg/dose\n        'azithromycin': 10    # mg/kg/dose\n    }\n    \n    drug_lower = drug_name.lower()\n    if drug_lower in max_doses:\n        if desired_dose_mg_per_kg > max_doses[drug_lower]:\n            safety_warnings.append(f'Dose exceeds recommended maximum for {drug_name}')\n    \n    # Volume safety check\n    if volume_ml > 20:\n        safety_warnings.append('Large volume - consider dividing dose')\n    \n    # Weight-based safety\n    if weight_kg < 2:\n        safety_warnings.append('Neonatal patient - verify dosing guidelines')\n    elif weight_kg > 100:\n        safety_warnings.append('Consider adult dosing protocols')\n    \n    return {\n        'drug': drug_name,\n        'patient_weight_kg': weight_kg,\n        'dose_per_kg': desired_dose_mg_per_kg,\n        'total_dose_mg': round(total_dose_mg, 1),\n        'volume_to_give_ml': round(volume_ml, 2),\n        'concentration_used': f'{concentration_mg_per_ml} mg/mL',\n        'safety_warnings': safety_warnings\n    }", "composite_functions": []}
{"snippet": "def f(serum_creatinine, age, weight_kg, sex):\n    # Creatinine Clearance Calculation (Cockcroft-Gault)\n    \n    # Cockcroft-Gault equation\n    # CrCl = ((140 - age) × weight) / (72 × serum_creatinine)\n    # For females, multiply by 0.85\n    \n    creatinine_clearance = ((140 - age) * weight_kg) / (72 * serum_creatinine)\n    \n    if sex.lower() == 'female':\n        creatinine_clearance *= 0.85\n    \n    # Kidney function assessment\n    if creatinine_clearance >= 90:\n        kidney_function = 'Normal'\n        ckd_stage = 'No CKD'\n    elif creatinine_clearance >= 60:\n        kidney_function = 'Mild decrease'\n        ckd_stage = 'Stage 2 CKD'\n    elif creatinine_clearance >= 45:\n        kidney_function = 'Mild to moderate decrease'\n        ckd_stage = 'Stage 3a CKD'\n    elif creatinine_clearance >= 30:\n        kidney_function = 'Moderate to severe decrease'\n        ckd_stage = 'Stage 3b CKD'\n    elif creatinine_clearance >= 15:\n        kidney_function = 'Severe decrease'\n        ckd_stage = 'Stage 4 CKD'\n    else:\n        kidney_function = 'Kidney failure'\n        ckd_stage = 'Stage 5 CKD'\n    \n    # Drug dosing recommendations\n    if creatinine_clearance < 30:\n        dosing_recommendation = 'Significant dose adjustments required for renally cleared drugs'\n    elif creatinine_clearance < 60:\n        dosing_recommendation = 'Consider dose adjustments for renally cleared drugs'\n    else:\n        dosing_recommendation = 'Normal drug dosing appropriate'\n    \n    return {\n        'creatinine_clearance_ml_min': round(creatinine_clearance, 1),\n        'kidney_function': kidney_function,\n        'ckd_stage': ckd_stage,\n        'dosing_recommendation': dosing_recommendation,\n        'patient_info': {\n            'age': age,\n            'weight_kg': weight_kg,\n            'sex': sex,\n            'serum_creatinine': serum_creatinine\n        }\n    }", "input": "1.8, 72, 70, 'male'", "output": "{'creatinine_clearance_ml_min': 36.5, 'kidney_function': 'Moderate to severe decrease', 'ckd_stage': 'Stage 3b CKD', 'dosing_recommendation': 'Significant dose adjustments required for renally cleared drugs', 'patient_info': {'age': 72, 'weight_kg': 70, 'sex': 'male', 'serum_creatinine': 1.8}}", "imports": [], "original_snippet": "def f(serum_creatinine, age, weight_kg, sex):\n    # Creatinine Clearance Calculation (Cockcroft-Gault)\n    \n    # Cockcroft-Gault equation\n    # CrCl = ((140 - age) × weight) / (72 × serum_creatinine)\n    # For females, multiply by 0.85\n    \n    creatinine_clearance = ((140 - age) * weight_kg) / (72 * serum_creatinine)\n    \n    if sex.lower() == 'female':\n        creatinine_clearance *= 0.85\n    \n    # Kidney function assessment\n    if creatinine_clearance >= 90:\n        kidney_function = 'Normal'\n        ckd_stage = 'No CKD'\n    elif creatinine_clearance >= 60:\n        kidney_function = 'Mild decrease'\n        ckd_stage = 'Stage 2 CKD'\n    elif creatinine_clearance >= 45:\n        kidney_function = 'Mild to moderate decrease'\n        ckd_stage = 'Stage 3a CKD'\n    elif creatinine_clearance >= 30:\n        kidney_function = 'Moderate to severe decrease'\n        ckd_stage = 'Stage 3b CKD'\n    elif creatinine_clearance >= 15:\n        kidney_function = 'Severe decrease'\n        ckd_stage = 'Stage 4 CKD'\n    else:\n        kidney_function = 'Kidney failure'\n        ckd_stage = 'Stage 5 CKD'\n    \n    # Drug dosing recommendations\n    if creatinine_clearance < 30:\n        dosing_recommendation = 'Significant dose adjustments required for renally cleared drugs'\n    elif creatinine_clearance < 60:\n        dosing_recommendation = 'Consider dose adjustments for renally cleared drugs'\n    else:\n        dosing_recommendation = 'Normal drug dosing appropriate'\n    \n    return {\n        'creatinine_clearance_ml_min': round(creatinine_clearance, 1),\n        'kidney_function': kidney_function,\n        'ckd_stage': ckd_stage,\n        'dosing_recommendation': dosing_recommendation,\n        'patient_info': {\n            'age': age,\n            'weight_kg': weight_kg,\n            'sex': sex,\n            'serum_creatinine': serum_creatinine\n        }\n    }", "composite_functions": []}
{"snippet": "def f(vital_signs_data):\n    # Multi-parameter Vital Signs Dashboard\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Extract data\n    timestamps = vital_signs_data['timestamps']\n    hr = vital_signs_data['heart_rate']\n    sbp = vital_signs_data['systolic_bp']\n    dbp = vital_signs_data['diastolic_bp']\n    rr = vital_signs_data['respiratory_rate']\n    spo2 = vital_signs_data['spo2']\n    temp = vital_signs_data['temperature']\n    \n    # Create subplot dashboard\n    fig, axes = plt.subplots(3, 2, figsize=(15, 12))\n    fig.suptitle('Comprehensive Vital Signs Dashboard', fontsize=16)\n    \n    # Heart Rate\n    axes[0, 0].plot(timestamps, hr, 'r-', marker='o')\n    axes[0, 0].set_title('Heart Rate')\n    axes[0, 0].set_ylabel('bpm')\n    axes[0, 0].grid(True, alpha=0.3)\n    \n    # Blood Pressure\n    axes[0, 1].plot(timestamps, sbp, 'b-', label='Systolic', marker='s')\n    axes[0, 1].plot(timestamps, dbp, 'g-', label='Diastolic', marker='^')\n    axes[0, 1].set_title('Blood Pressure')\n    axes[0, 1].set_ylabel('mmHg')\n    axes[0, 1].legend()\n    axes[0, 1].grid(True, alpha=0.3)\n    \n    # Respiratory Rate\n    axes[1, 0].plot(timestamps, rr, 'orange', marker='d')\n    axes[1, 0].set_title('Respiratory Rate')\n    axes[1, 0].set_ylabel('breaths/min')\n    axes[1, 0].grid(True, alpha=0.3)\n    \n    # SpO2\n    axes[1, 1].plot(timestamps, spo2, 'blue', marker='o')\n    axes[1, 1].set_title('Oxygen Saturation')\n    axes[1, 1].set_ylabel('SpO2 (%)')\n    axes[1, 1].grid(True, alpha=0.3)\n    \n    # Temperature\n    axes[2, 0].plot(timestamps, temp, 'red', marker='s')\n    axes[2, 0].set_title('Temperature')\n    axes[2, 0].set_ylabel('°C')\n    axes[2, 0].grid(True, alpha=0.3)\n    \n    # Summary statistics\n    summary_stats = {\n        'hr_mean': round(np.mean(hr), 1),\n        'bp_mean': f'{round(np.mean(sbp), 1)}/{round(np.mean(dbp), 1)}',\n        'rr_mean': round(np.mean(rr), 1),\n        'spo2_mean': round(np.mean(spo2), 1),\n        'temp_max': round(max(temp), 1)\n    }\n    \n    # Clear the last subplot for summary\n    axes[2, 1].axis('off')\n    summary_text = f\"\"\"SUMMARY STATISTICS:\n    \nMean HR: {summary_stats['hr_mean']} bpm\nMean BP: {summary_stats['bp_mean']} mmHg\nMean RR: {summary_stats['rr_mean']} /min\nMean SpO2: {summary_stats['spo2_mean']}%\nMax Temp: {summary_stats['temp_max']}°C\"\"\"\n    axes[2, 1].text(0.1, 0.5, summary_text, fontsize=12, \n                    verticalalignment='center', fontfamily='monospace')\n    \n    plt.tight_layout()\n    \n    return summary_stats", "input": "{'timestamps': [0, 2, 4, 6, 8], 'heart_rate': [72, 78, 85, 82, 79], 'systolic_bp': [120, 125, 135, 130, 128], 'diastolic_bp': [80, 85, 88, 85, 82], 'respiratory_rate': [16, 18, 20, 18, 17], 'spo2': [98, 97, 96, 97, 98], 'temperature': [36.8, 37.1, 37.5, 37.2, 36.9]}", "output": "{'hr_mean': 79.2, 'bp_mean': '127.6/84.0', 'rr_mean': 17.8, 'spo2_mean': 97.2, 'temp_max': 37.5}", "imports": ["import matplotlib.pyplot as plt", "import numpy as np"], "original_snippet": "def f(vital_signs_data):\n    # Multi-parameter Vital Signs Dashboard\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Extract data\n    timestamps = vital_signs_data['timestamps']\n    hr = vital_signs_data['heart_rate']\n    sbp = vital_signs_data['systolic_bp']\n    dbp = vital_signs_data['diastolic_bp']\n    rr = vital_signs_data['respiratory_rate']\n    spo2 = vital_signs_data['spo2']\n    temp = vital_signs_data['temperature']\n    \n    # Create subplot dashboard\n    fig, axes = plt.subplots(3, 2, figsize=(15, 12))\n    fig.suptitle('Comprehensive Vital Signs Dashboard', fontsize=16)\n    \n    # Heart Rate\n    axes[0, 0].plot(timestamps, hr, 'r-', marker='o')\n    axes[0, 0].set_title('Heart Rate')\n    axes[0, 0].set_ylabel('bpm')\n    axes[0, 0].grid(True, alpha=0.3)\n    \n    # Blood Pressure\n    axes[0, 1].plot(timestamps, sbp, 'b-', label='Systolic', marker='s')\n    axes[0, 1].plot(timestamps, dbp, 'g-', label='Diastolic', marker='^')\n    axes[0, 1].set_title('Blood Pressure')\n    axes[0, 1].set_ylabel('mmHg')\n    axes[0, 1].legend()\n    axes[0, 1].grid(True, alpha=0.3)\n    \n    # Respiratory Rate\n    axes[1, 0].plot(timestamps, rr, 'orange', marker='d')\n    axes[1, 0].set_title('Respiratory Rate')\n    axes[1, 0].set_ylabel('breaths/min')\n    axes[1, 0].grid(True, alpha=0.3)\n    \n    # SpO2\n    axes[1, 1].plot(timestamps, spo2, 'blue', marker='o')\n    axes[1, 1].set_title('Oxygen Saturation')\n    axes[1, 1].set_ylabel('SpO2 (%)')\n    axes[1, 1].grid(True, alpha=0.3)\n    \n    # Temperature\n    axes[2, 0].plot(timestamps, temp, 'red', marker='s')\n    axes[2, 0].set_title('Temperature')\n    axes[2, 0].set_ylabel('°C')\n    axes[2, 0].grid(True, alpha=0.3)\n    \n    # Summary statistics\n    summary_stats = {\n        'hr_mean': round(np.mean(hr), 1),\n        'bp_mean': f'{round(np.mean(sbp), 1)}/{round(np.mean(dbp), 1)}',\n        'rr_mean': round(np.mean(rr), 1),\n        'spo2_mean': round(np.mean(spo2), 1),\n        'temp_max': round(max(temp), 1)\n    }\n    \n    # Clear the last subplot for summary\n    axes[2, 1].axis('off')\n    summary_text = f\"\"\"SUMMARY STATISTICS:\n    \nMean HR: {summary_stats['hr_mean']} bpm\nMean BP: {summary_stats['bp_mean']} mmHg\nMean RR: {summary_stats['rr_mean']} /min\nMean SpO2: {summary_stats['spo2_mean']}%\nMax Temp: {summary_stats['temp_max']}°C\"\"\"\n    axes[2, 1].text(0.1, 0.5, summary_text, fontsize=12, \n                    verticalalignment='center', fontfamily='monospace')\n    \n    plt.tight_layout()\n    \n    return summary_stats", "composite_functions": []}
{"snippet": "def f(age, temp, hr, sbp, resp_rate, pao2_fio2, gcs, bun, hematocrit, sodium, potassium, creatinine, ph, wbc, chronic_health):\n    # SAPS II (Simplified Acute Physiology Score II) Calculation\n    import math\n    \n    score = 0\n    \n    # Age scoring\n    if age < 40:\n        age_points = 0\n    elif age < 60:\n        age_points = 7\n    elif age < 70:\n        age_points = 12\n    elif age < 75:\n        age_points = 15\n    elif age < 80:\n        age_points = 16\n    else:\n        age_points = 18\n    score += age_points\n    \n    # Heart rate (worst value in 24h)\n    if hr < 40:\n        hr_points = 11\n    elif hr < 70:\n        hr_points = 2\n    elif hr < 120:\n        hr_points = 0\n    elif hr < 160:\n        hr_points = 4\n    else:\n        hr_points = 7\n    score += hr_points\n    \n    # Systolic BP (worst value)\n    if sbp < 70:\n        bp_points = 13\n    elif sbp < 100:\n        bp_points = 5\n    elif sbp < 200:\n        bp_points = 0\n    else:\n        bp_points = 2\n    score += bp_points\n    \n    # Creatinine (mg/dL)\n    if creatinine < 0.4:\n        creat_points = 1\n    elif creatinine < 0.8:\n        creat_points = 4\n    elif creatinine < 1.2:\n        creat_points = 7\n    elif creatinine < 1.6:\n        creat_points = 10\n    elif creatinine < 2.0:\n        creat_points = 13\n    elif creatinine < 4.0:\n        creat_points = 21\n    else:\n        creat_points = 28\n    score += creat_points\n    \n    # Killip class\n    killip_points = [0, 20, 39, 59][killip_class - 1]\n    score += killip_points\n    \n    # Cardiac arrest at admission\n    if cardiac_arrest:\n        score += 39\n    \n    # ST segment deviation\n    if st_elevation:\n        score += 28\n    \n    # Elevated cardiac enzymes\n    if cardiac_enzymes_elevated:\n        score += 14\n    \n    # Risk stratification for in-hospital mortality\n    if score <= 108:\n        risk_category = 'Low risk'\n        mortality_risk = '<1% in-hospital mortality'\n    elif score <= 140:\n        risk_category = 'Intermediate risk'\n        mortality_risk = '1-3% in-hospital mortality'\n    else:\n        risk_category = 'High risk'\n        mortality_risk = '>3% in-hospital mortality'\n    \n    # Six-month mortality risk\n    if score <= 88:\n        six_month_mortality = '<3%'\n    elif score <= 118:\n        six_month_mortality = '3-8%'\n    else:\n        six_month_mortality = '>8%'\n    \n    return {\n        'saps_ii_score': score,\n        'risk_category': risk_category,\n        'in_hospital_mortality': mortality_risk,\n        'six_month_mortality': six_month_mortality,\n        'score_components': {\n            'age_points': age_points,\n            'hr_points': hr_points,\n            'bp_points': bp_points,\n            'creatinine_points': creat_points,\n            'killip_points': killip_points,\n            'cardiac_arrest_points': 39 if cardiac_arrest else 0,\n            'st_elevation_points': 28 if st_elevation else 0,\n            'enzyme_points': 14 if cardiac_enzymes_elevated else 0\n        }\n    }", "input": "65, 2, 110, 95, 1.4, False, True, True", "output": "{'saps_ii_score': 197, 'risk_category': 'High risk', 'in_hospital_mortality': '>3% in-hospital mortality', 'six_month_mortality': '>8%', 'score_components': {'age_points': 58, 'hr_points': 15, 'bp_points': 34, 'creatinine_points': 10, 'killip_points': 39, 'cardiac_arrest_points': 0, 'st_elevation_points': 28, 'enzyme_points': 14}}", "imports": ["import math"], "original_snippet": "def f(age, temp, hr, sbp, resp_rate, pao2_fio2, gcs, bun, hematocrit, sodium, potassium, creatinine, ph, wbc, chronic_health):\n    # SAPS II (Simplified Acute Physiology Score II) Calculation\n    import math\n    \n    score = 0\n    \n    # Age scoring\n    if age < 40:\n        age_points = 0\n    elif age < 60:\n        age_points = 7\n    elif age < 70:\n        age_points = 12\n    elif age < 75:\n        age_points = 15\n    elif age < 80:\n        age_points = 16\n    else:\n        age_points = 18\n    score += age_points\n    \n    # Heart rate (worst value in 24h)\n    if hr < 40:\n        hr_points = 11\n    elif hr < 70:\n        hr_points = 2\n    elif hr < 120:\n        hr_points = 0\n    elif hr < 160:\n        hr_points = 4\n    else:\n        hr_points = 7\n    score += hr_points\n    \n    # Systolic BP (worst value)\n    if sbp < 70:\n        bp_points = 13\n    elif sbp < 100:\n        bp_points = 5\n    elif sbp < 200:\n        bp_points = 0\n    else:\n        bp_points = 2\n    score += bp_points\n    \n    # Creatinine (mg/dL)\n    if creatinine < 0.4:\n        creat_points = 1\n    elif creatinine < 0.8:\n        creat_points = 4\n    elif creatinine < 1.2:\n        creat_points = 7\n    elif creatinine < 1.6:\n        creat_points = 10\n    elif creatinine < 2.0:\n        creat_points = 13\n    elif creatinine < 4.0:\n        creat_points = 21\n    else:\n        creat_points = 28\n    score += creat_points\n    \n    # Killip class\n    killip_points = [0, 20, 39, 59][killip_class - 1]\n    score += killip_points\n    \n    # Cardiac arrest at admission\n    if cardiac_arrest:\n        score += 39\n    \n    # ST segment deviation\n    if st_elevation:\n        score += 28\n    \n    # Elevated cardiac enzymes\n    if cardiac_enzymes_elevated:\n        score += 14\n    \n    # Risk stratification for in-hospital mortality\n    if score <= 108:\n        risk_category = 'Low risk'\n        mortality_risk = '<1% in-hospital mortality'\n    elif score <= 140:\n        risk_category = 'Intermediate risk'\n        mortality_risk = '1-3% in-hospital mortality'\n    else:\n        risk_category = 'High risk'\n        mortality_risk = '>3% in-hospital mortality'\n    \n    # Six-month mortality risk\n    if score <= 88:\n        six_month_mortality = '<3%'\n    elif score <= 118:\n        six_month_mortality = '3-8%'\n    else:\n        six_month_mortality = '>8%'\n    \n    return {\n        'saps_ii_score': score,\n        'risk_category': risk_category,\n        'in_hospital_mortality': mortality_risk,\n        'six_month_mortality': six_month_mortality,\n        'score_components': {\n            'age_points': age_points,\n            'hr_points': hr_points,\n            'bp_points': bp_points,\n            'creatinine_points': creat_points,\n            'killip_points': killip_points,\n            'cardiac_arrest_points': 39 if cardiac_arrest else 0,\n            'st_elevation_points': 28 if st_elevation else 0,\n            'enzyme_points': 14 if cardiac_enzymes_elevated else 0\n        }\n    }", "composite_functions": []}
{"snippet": "def f(heart_failure_signs, murmur_grade, rales_location):\n    # Killip Classification for Heart Failure Severity in Acute MI\n    \n    # Killip Class determination based on clinical findings\n    if not heart_failure_signs and murmur_grade == 0:\n        killip_class = 1\n        description = 'No clinical signs of heart failure'\n        mortality_risk = '6%'\n        clinical_findings = 'No S3 gallop, no rales'\n        \n    elif rales_location == 'lower_half' or murmur_grade <= 2:\n        killip_class = 2\n        description = 'Mild to moderate heart failure'\n        mortality_risk = '17%'\n        clinical_findings = 'S3 gallop, rales over lower half of lungs'\n        \n    elif rales_location == 'extensive' or heart_failure_signs == 'severe':\n        killip_class = 3\n        description = 'Severe heart failure (pulmonary edema)'\n        mortality_risk = '38%'\n        clinical_findings = 'Acute pulmonary edema with rales throughout'\n        \n    else:  # Cardiogenic shock\n        killip_class = 4\n        description = 'Cardiogenic shock'\n        mortality_risk = '67%'\n        clinical_findings = 'Hypotension, end-organ hypoperfusion'\n    \n    # Management recommendations\n    if killip_class == 1:\n        management = 'Standard post-MI care, ACE inhibitor, beta-blocker'\n    elif killip_class == 2:\n        management = 'Diuretics, ACE inhibitor, monitor fluid status'\n    elif killip_class == 3:\n        management = 'Aggressive diuresis, vasodilators, possible CPAP/BiPAP'\n    else:  # Class 4\n        management = 'Inotropes, mechanical support (IABP, ECMO), urgent catheterization'\n    \n    # Prognosis and monitoring\n    if killip_class <= 2:\n        monitoring_level = 'Standard cardiac monitoring'\n    else:\n        monitoring_level = 'Intensive care monitoring required'\n    \n    return {\n        'killip_class': killip_class,\n        'description': description,\n        'mortality_risk': mortality_risk,\n        'clinical_findings': clinical_findings,\n        'management': management,\n        'monitoring_level': monitoring_level,\n        'components': {\n            'heart_failure_signs': heart_failure_signs,\n            'murmur_grade': murmur_grade,\n            'rales_location': rales_location\n        }\n    }", "input": "'moderate', 1, 'lower_half'", "output": "{'killip_class': 2, 'description': 'Mild to moderate heart failure', 'mortality_risk': '17%', 'clinical_findings': 'S3 gallop, rales over lower half of lungs', 'management': 'Diuretics, ACE inhibitor, monitor fluid status', 'monitoring_level': 'Standard cardiac monitoring', 'components': {'heart_failure_signs': 'moderate', 'murmur_grade': 1, 'rales_location': 'lower_half'}}", "imports": [], "original_snippet": "def f(heart_failure_signs, murmur_grade, rales_location):\n    # Killip Classification for Heart Failure Severity in Acute MI\n    \n    # Killip Class determination based on clinical findings\n    if not heart_failure_signs and murmur_grade == 0:\n        killip_class = 1\n        description = 'No clinical signs of heart failure'\n        mortality_risk = '6%'\n        clinical_findings = 'No S3 gallop, no rales'\n        \n    elif rales_location == 'lower_half' or murmur_grade <= 2:\n        killip_class = 2\n        description = 'Mild to moderate heart failure'\n        mortality_risk = '17%'\n        clinical_findings = 'S3 gallop, rales over lower half of lungs'\n        \n    elif rales_location == 'extensive' or heart_failure_signs == 'severe':\n        killip_class = 3\n        description = 'Severe heart failure (pulmonary edema)'\n        mortality_risk = '38%'\n        clinical_findings = 'Acute pulmonary edema with rales throughout'\n        \n    else:  # Cardiogenic shock\n        killip_class = 4\n        description = 'Cardiogenic shock'\n        mortality_risk = '67%'\n        clinical_findings = 'Hypotension, end-organ hypoperfusion'\n    \n    # Management recommendations\n    if killip_class == 1:\n        management = 'Standard post-MI care, ACE inhibitor, beta-blocker'\n    elif killip_class == 2:\n        management = 'Diuretics, ACE inhibitor, monitor fluid status'\n    elif killip_class == 3:\n        management = 'Aggressive diuresis, vasodilators, possible CPAP/BiPAP'\n    else:  # Class 4\n        management = 'Inotropes, mechanical support (IABP, ECMO), urgent catheterization'\n    \n    # Prognosis and monitoring\n    if killip_class <= 2:\n        monitoring_level = 'Standard cardiac monitoring'\n    else:\n        monitoring_level = 'Intensive care monitoring required'\n    \n    return {\n        'killip_class': killip_class,\n        'description': description,\n        'mortality_risk': mortality_risk,\n        'clinical_findings': clinical_findings,\n        'management': management,\n        'monitoring_level': monitoring_level,\n        'components': {\n            'heart_failure_signs': heart_failure_signs,\n            'murmur_grade': murmur_grade,\n            'rales_location': rales_location\n        }\n    }", "composite_functions": []} 