{"snippet": "def f(heart_rates, timestamps):\n    import matplotlib.pyplot as plt\n    import numpy as np\n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, heart_rates, 'r-', linewidth=2, marker='o')\n    plt.title('Heart Rate Trend Over Time')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Heart Rate (bpm)')\n    plt.grid(True, alpha=0.3)\n    plt.ylim(50, 120)\n    return f'Plot generated with {len(heart_rates)} data points'", "input": "[72, 78, 85, 82, 79, 88, 92, 87], [0, 1, 2, 3, 4, 5, 6, 7]", "output": "'Plot generated with 8 data points'", "imports": ["import matplotlib.pyplot as plt", "import numpy as np"], "original_snippet": "def f(heart_rates, timestamps):\n    import matplotlib.pyplot as plt\n    import numpy as np\n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, heart_rates, 'r-', linewidth=2, marker='o')\n    plt.title('Heart Rate Trend Over Time')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Heart Rate (bpm)')\n    plt.grid(True, alpha=0.3)\n    plt.ylim(50, 120)\n    return f'Plot generated with {len(heart_rates)} data points'", "composite_functions": []}
{"snippet": "def f(systolic_bp, diastolic_bp, timestamps):\n    import matplotlib.pyplot as plt\n    plt.figure(figsize=(12, 8))\n    plt.plot(timestamps, systolic_bp, 'b-', label='Systolic', marker='s', linewidth=2)\n    plt.plot(timestamps, diastolic_bp, 'g-', label='Diastolic', marker='^', linewidth=2)\n    plt.title('Blood Pressure Trend')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Blood Pressure (mmHg)')\n    plt.legend()\n    plt.grid(True, alpha=0.3)\n    mean_systolic = sum(systolic_bp) / len(systolic_bp)\n    return round(mean_systolic, 1)", "input": "[120, 125, 118, 132, 128, 135], [80, 85, 82, 88, 85, 90], [0, 2, 4, 6, 8, 10]", "output": "126.3", "imports": ["import matplotlib.pyplot as plt"], "original_snippet": "def f(systolic_bp, diastolic_bp, timestamps):\n    import matplotlib.pyplot as plt\n    plt.figure(figsize=(12, 8))\n    plt.plot(timestamps, systolic_bp, 'b-', label='Systolic', marker='s', linewidth=2)\n    plt.plot(timestamps, diastolic_bp, 'g-', label='Diastolic', marker='^', linewidth=2)\n    plt.title('Blood Pressure Trend')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('Blood Pressure (mmHg)')\n    plt.legend()\n    plt.grid(True, alpha=0.3)\n    mean_systolic = sum(systolic_bp) / len(systolic_bp)\n    return round(mean_systolic, 1)", "composite_functions": []}
{"snippet": "def f(age, acute_physiology_score, chronic_health_points):\n    # APACHE II Score Calculation\n    if age < 45:\n        age_points = 0\n    elif age < 55:\n        age_points = 2\n    elif age < 65:\n        age_points = 3\n    elif age < 75:\n        age_points = 5\n    else:\n        age_points = 6\n    \n    apache_ii = age_points + acute_physiology_score + chronic_health_points\n    \n    # Mortality prediction based on APACHE II\n    if apache_ii < 10:\n        mortality_risk = 'Low (4%)'  \n    elif apache_ii < 15:\n        mortality_risk = 'Moderate (8%)'   \n    elif apache_ii < 20:\n        mortality_risk = 'High (15%)'\n    elif apache_ii < 25:\n        mortality_risk = 'Very High (25%)'\n    else:\n        mortality_risk = 'Critical (40%+)'\n    \n    return {'apache_ii_score': apache_ii, 'mortality_risk': mortality_risk}", "input": "67, 15, 2", "output": "{'apache_ii_score': 22, 'mortality_risk': 'Very High (25%)'}", "imports": [], "original_snippet": "def f(age, acute_physiology_score, chronic_health_points):\n    # APACHE II Score Calculation\n    if age < 45:\n        age_points = 0\n    elif age < 55:\n        age_points = 2\n    elif age < 65:\n        age_points = 3\n    elif age < 75:\n        age_points = 5\n    else:\n        age_points = 6\n    \n    apache_ii = age_points + acute_physiology_score + chronic_health_points\n    \n    # Mortality prediction based on APACHE II\n    if apache_ii < 10:\n        mortality_risk = 'Low (4%)'  \n    elif apache_ii < 15:\n        mortality_risk = 'Moderate (8%)'   \n    elif apache_ii < 20:\n        mortality_risk = 'High (15%)'\n    elif apache_ii < 25:\n        mortality_risk = 'Very High (25%)'\n    else:\n        mortality_risk = 'Critical (40%+)'\n    \n    return {'apache_ii_score': apache_ii, 'mortality_risk': mortality_risk}", "composite_functions": []}
{"snippet": "def f(age, sex, chf, hypertension, diabetes, stroke_tia, vascular_disease):\n    # CHA₂DS₂-VASc Score for Stroke Risk in Atrial Fibrillation\n    score = 0\n    \n    # Age scoring\n    if age >= 75:\n        score += 2\n    elif age >= 65:\n        score += 1\n    \n    # Female sex\n    if sex.lower() == 'female':\n        score += 1\n    \n    # Risk factors (each worth 1 point)\n    score += chf + hypertension + diabetes + stroke_tia + vascular_disease\n    \n    # Risk assessment\n    if score == 0:\n        risk_level = 'Low'\n        annual_stroke_risk = '0%'\n    elif score == 1:\n        risk_level = 'Low-Moderate'\n        annual_stroke_risk = '1.3%'\n    elif score == 2:\n        risk_level = 'Moderate'\n        annual_stroke_risk = '2.2%'\n    elif score >= 3:\n        risk_level = 'High'\n        annual_stroke_risk = f'{2.2 + (score-2)*1.5:.1f}%'\n    \n    return {'cha2ds2_vasc_score': score, 'risk_level': risk_level, 'annual_stroke_risk': annual_stroke_risk}", "input": "78, 'female', 1, 1, 0, 1, 0", "output": "{'cha2ds2_vasc_score': 6, 'risk_level': 'High', 'annual_stroke_risk': '8.2%'}", "imports": [], "original_snippet": "def f(age, sex, chf, hypertension, diabetes, stroke_tia, vascular_disease):\n    # CHA₂DS₂-VASc Score for Stroke Risk in Atrial Fibrillation\n    score = 0\n    \n    # Age scoring\n    if age >= 75:\n        score += 2\n    elif age >= 65:\n        score += 1\n    \n    # Female sex\n    if sex.lower() == 'female':\n        score += 1\n    \n    # Risk factors (each worth 1 point)\n    score += chf + hypertension + diabetes + stroke_tia + vascular_disease\n    \n    # Risk assessment\n    if score == 0:\n        risk_level = 'Low'\n        annual_stroke_risk = '0%'\n    elif score == 1:\n        risk_level = 'Low-Moderate'\n        annual_stroke_risk = '1.3%'\n    elif score == 2:\n        risk_level = 'Moderate'\n        annual_stroke_risk = '2.2%'\n    elif score >= 3:\n        risk_level = 'High'\n        annual_stroke_risk = f'{2.2 + (score-2)*1.5:.1f}%'\n    \n    return {'cha2ds2_vasc_score': score, 'risk_level': risk_level, 'annual_stroke_risk': annual_stroke_risk}", "composite_functions": []}
{"snippet": "def f(eye_opening, verbal_response, motor_response):\n    # Glasgow Coma Scale Calculation\n    gcs_score = eye_opening + verbal_response + motor_response\n    \n    # Consciousness level assessment\n    if gcs_score >= 13:\n        consciousness_level = 'Mild injury'\n        severity = 'Minor'\n    elif gcs_score >= 9:\n        consciousness_level = 'Moderate injury'\n        severity = 'Moderate'\n    elif gcs_score >= 3:\n        consciousness_level = 'Severe injury'\n        severity = 'Severe'\n    else:\n        consciousness_level = 'Invalid score'\n        severity = 'Error'\n    \n    components = {\n        'eye_opening': eye_opening,\n        'verbal_response': verbal_response, \n        'motor_response': motor_response\n    }\n    \n    return {\n        'gcs_score': gcs_score,\n        'consciousness_level': consciousness_level,\n        'severity': severity,\n        'components': components\n    }", "input": "3, 4, 5", "output": "{'gcs_score': 12, 'consciousness_level': 'Moderate injury', 'severity': 'Moderate', 'components': {'eye_opening': 3, 'verbal_response': 4, 'motor_response': 5}}", "imports": [], "original_snippet": "def f(eye_opening, verbal_response, motor_response):\n    # Glasgow Coma Scale Calculation\n    gcs_score = eye_opening + verbal_response + motor_response\n    \n    # Consciousness level assessment\n    if gcs_score >= 13:\n        consciousness_level = 'Mild injury'\n        severity = 'Minor'\n    elif gcs_score >= 9:\n        consciousness_level = 'Moderate injury'\n        severity = 'Moderate'\n    elif gcs_score >= 3:\n        consciousness_level = 'Severe injury'\n        severity = 'Severe'\n    else:\n        consciousness_level = 'Invalid score'\n        severity = 'Error'\n    \n    components = {\n        'eye_opening': eye_opening,\n        'verbal_response': verbal_response, \n        'motor_response': motor_response\n    }\n    \n    return {\n        'gcs_score': gcs_score,\n        'consciousness_level': consciousness_level,\n        'severity': severity,\n        'components': components\n    }", "composite_functions": []}
{"snippet": "def f(face_score, arms_score, speech_score, time_discovered):\n    # NIHSS components for stroke severity assessment\n    import datetime\n    \n    # Basic NIHSS calculation (simplified)\n    nihss_score = face_score + arms_score + speech_score\n    \n    # Stroke severity classification\n    if nihss_score <= 4:\n        severity = 'Minor stroke'\n        treatment_urgency = 'Standard'\n    elif nihss_score <= 15:\n        severity = 'Moderate stroke'\n        treatment_urgency = 'Urgent'\n    elif nihss_score <= 20:\n        severity = 'Moderate to severe stroke'\n        treatment_urgency = 'Emergent'\n    else:\n        severity = 'Severe stroke'\n        treatment_urgency = 'Critical'\n    \n    # Time window for treatment\n    current_time = datetime.datetime.now()\n    discovery_time = datetime.datetime.fromisoformat(time_discovered)\n    time_since_onset = (current_time - discovery_time).total_seconds() / 3600\n    \n    thrombolysis_eligible = time_since_onset <= 4.5\n    \n    return {\n        'nihss_score': nihss_score,\n        'severity': severity,\n        'treatment_urgency': treatment_urgency,\n        'thrombolysis_eligible': thrombolysis_eligible,\n        'hours_since_onset': round(time_since_onset, 1)\n    }", "input": "2, 3, 1, '2024-01-01T10:00:00'", "output": "{'nihss_score': 6, 'severity': 'Moderate stroke', 'treatment_urgency': 'Urgent', 'thrombolysis_eligible': False, 'hours_since_onset': 8761.0}", "imports": ["import datetime"], "original_snippet": "def f(face_score, arms_score, speech_score, time_discovered):\n    # NIHSS components for stroke severity assessment\n    import datetime\n    \n    # Basic NIHSS calculation (simplified)\n    nihss_score = face_score + arms_score + speech_score\n    \n    # Stroke severity classification\n    if nihss_score <= 4:\n        severity = 'Minor stroke'\n        treatment_urgency = 'Standard'\n    elif nihss_score <= 15:\n        severity = 'Moderate stroke'\n        treatment_urgency = 'Urgent'\n    elif nihss_score <= 20:\n        severity = 'Moderate to severe stroke'\n        treatment_urgency = 'Emergent'\n    else:\n        severity = 'Severe stroke'\n        treatment_urgency = 'Critical'\n    \n    # Time window for treatment\n    current_time = datetime.datetime.now()\n    discovery_time = datetime.datetime.fromisoformat(time_discovered)\n    time_since_onset = (current_time - discovery_time).total_seconds() / 3600\n    \n    thrombolysis_eligible = time_since_onset <= 4.5\n    \n    return {\n        'nihss_score': nihss_score,\n        'severity': severity,\n        'treatment_urgency': treatment_urgency,\n        'thrombolysis_eligible': thrombolysis_eligible,\n        'hours_since_onset': round(time_since_onset, 1)\n    }", "composite_functions": []}
{"snippet": "def f(medication_schedule):\n    # eMAR (Electronic Medication Administration Record) Timeline\n    import matplotlib.pyplot as plt\n    from datetime import datetime, timedelta\n    \n    # Extract times and medications\n    times = []\n    meds = []\n    \n    for entry in medication_schedule:\n        time_str = entry['time']\n        med_name = entry['medication']\n        dose = entry['dose']\n        \n        # Convert time string to hours for plotting\n        hour = int(time_str.split(':')[0])\n        times.append(hour)\n        meds.append(f\"{med_name} {dose}\")\n    \n    # Create timeline visualization\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    # Plot timeline\n    for i, (time, med) in enumerate(zip(times, meds)):\n        ax.scatter(time, 1, s=100, c='blue', alpha=0.7)\n        ax.annotate(med, (time, 1), xytext=(0, 20), \n                   textcoords='offset points', ha='center',\n                   bbox=dict(boxstyle='round,pad=0.3', facecolor='lightblue'))\n    \n    ax.set_xlim(0, 24)\n    ax.set_ylim(0.5, 1.5)\n    ax.set_xlabel('Time (24-hour format)')\n    ax.set_title('eMAR - Medication Administration Timeline')\n    ax.grid(True, alpha=0.3)\n    \n    return f'Timeline created for {len(medication_schedule)} medications'", "input": "[{'time': '08:00', 'medication': 'Metformin', 'dose': '500mg'}, {'time': '12:00', 'medication': 'Lisinopril', 'dose': '10mg'}, {'time': '18:00', 'medication': 'Metformin', 'dose': '500mg'}, {'time': '22:00', 'medication': 'Atorvastatin', 'dose': '20mg'}]", "output": "'Timeline created for 4 medications'", "imports": ["import matplotlib.pyplot as plt", "from datetime import datetime, timedelta"], "original_snippet": "def f(medication_schedule):\n    # eMAR (Electronic Medication Administration Record) Timeline\n    import matplotlib.pyplot as plt\n    from datetime import datetime, timedelta\n    \n    # Extract times and medications\n    times = []\n    meds = []\n    \n    for entry in medication_schedule:\n        time_str = entry['time']\n        med_name = entry['medication']\n        dose = entry['dose']\n        \n        # Convert time string to hours for plotting\n        hour = int(time_str.split(':')[0])\n        times.append(hour)\n        meds.append(f\"{med_name} {dose}\")\n    \n    # Create timeline visualization\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    # Plot timeline\n    for i, (time, med) in enumerate(zip(times, meds)):\n        ax.scatter(time, 1, s=100, c='blue', alpha=0.7)\n        ax.annotate(med, (time, 1), xytext=(0, 20), \n                   textcoords='offset points', ha='center',\n                   bbox=dict(boxstyle='round,pad=0.3', facecolor='lightblue'))\n    \n    ax.set_xlim(0, 24)\n    ax.set_ylim(0.5, 1.5)\n    ax.set_xlabel('Time (24-hour format)')\n    ax.set_title('eMAR - Medication Administration Timeline')\n    ax.grid(True, alpha=0.3)\n    \n    return f'Timeline created for {len(medication_schedule)} medications'", "composite_functions": []}
{"snippet": "def f(age_months, weight_kg, height_cm, sex):\n    # Pediatric Growth Percentile Calculation (simplified)\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    # Sample percentile data for weight (kg) by age (months) for males\n    weight_percentiles_male = {\n        3: [5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0],   # 3rd, 10th, 25th, 50th, 75th, 90th, 97th\n        6: [6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5],\n        12: [8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5],\n        24: [10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5]\n    }\n    \n    # Find closest age match\n    available_ages = list(weight_percentiles_male.keys())\n    closest_age = min(available_ages, key=lambda x: abs(x - age_months))\n    percentiles = weight_percentiles_male[closest_age]\n    \n    # Determine percentile\n    percentile_labels = [3, 10, 25, 50, 75, 90, 97]\n    \n    for i, p_weight in enumerate(percentiles):\n        if weight_kg <= p_weight:\n            if i == 0:\n                percentile = f'<{percentile_labels[0]}th'\n            else:\n                percentile = f'~{percentile_labels[i]}th'\n            break\n    else:\n        percentile = '>97th'\n    \n    # Growth assessment\n    if percentile in ['<3th', '~3th']:\n        assessment = 'Underweight - consultation recommended'\n    elif percentile in ['>97th']:\n        assessment = 'Overweight - monitoring recommended'\n    else:\n        assessment = 'Normal growth pattern'\n    \n    return {\n        'age_months': age_months,\n        'weight_percentile': percentile,\n        'assessment': assessment,\n        'closest_reference_age': closest_age\n    }", "input": "12, 9.2, 75, 'male'", "output": "{'age_months': 12, 'weight_percentile': '~10th', 'assessment': 'Normal growth pattern', 'closest_reference_age': 12}", "imports": ["import numpy as np", "import matplotlib.pyplot as plt"], "original_snippet": "def f(age_months, weight_kg, height_cm, sex):\n    # Pediatric Growth Percentile Calculation (simplified)\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    # Sample percentile data for weight (kg) by age (months) for males\n    weight_percentiles_male = {\n        3: [5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0],   # 3rd, 10th, 25th, 50th, 75th, 90th, 97th\n        6: [6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5],\n        12: [8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5],\n        24: [10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5]\n    }\n    \n    # Find closest age match\n    available_ages = list(weight_percentiles_male.keys())\n    closest_age = min(available_ages, key=lambda x: abs(x - age_months))\n    percentiles = weight_percentiles_male[closest_age]\n    \n    # Determine percentile\n    percentile_labels = [3, 10, 25, 50, 75, 90, 97]\n    \n    for i, p_weight in enumerate(percentiles):\n        if weight_kg <= p_weight:\n            if i == 0:\n                percentile = f'<{percentile_labels[0]}th'\n            else:\n                percentile = f'~{percentile_labels[i]}th'\n            break\n    else:\n        percentile = '>97th'\n    \n    # Growth assessment\n    if percentile in ['<3th', '~3th']:\n        assessment = 'Underweight - consultation recommended'\n    elif percentile in ['>97th']:\n        assessment = 'Overweight - monitoring recommended'\n    else:\n        assessment = 'Normal growth pattern'\n    \n    return {\n        'age_months': age_months,\n        'weight_percentile': percentile,\n        'assessment': assessment,\n        'closest_reference_age': closest_age\n    }", "composite_functions": []}
{"snippet": "def f(spo2_values, timestamps):\n    # SpO2 (Oxygen Saturation) Trend Analysis\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Plot SpO2 trend\n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, spo2_values, 'b-', linewidth=2, marker='o', markersize=6)\n    plt.axhline(y=95, color='g', linestyle='--', alpha=0.7, label='Normal threshold (95%)')\n    plt.axhline(y=90, color='orange', linestyle='--', alpha=0.7, label='Hypoxemia threshold (90%)')\n    plt.axhline(y=85, color='r', linestyle='--', alpha=0.7, label='Severe hypoxemia (85%)')\n    \n    plt.title('SpO2 Trend Over Time')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('SpO2 (%)')\n    plt.ylim(75, 100)\n    plt.grid(True, alpha=0.3)\n    plt.legend()\n    \n    # Calculate statistics\n    mean_spo2 = np.mean(spo2_values)\n    min_spo2 = min(spo2_values)\n    hypoxemia_episodes = sum(1 for x in spo2_values if x < 90)\n    \n    # Assessment\n    if min_spo2 < 85:\n        status = 'Critical - Severe hypoxemia detected'\n    elif hypoxemia_episodes > 0:\n        status = 'Warning - Hypoxemia episodes detected'\n    elif mean_spo2 < 95:\n        status = 'Monitoring - Below normal threshold'\n    else:\n        status = 'Normal oxygen saturation'\n    \n    return {\n        'mean_spo2': round(mean_spo2, 1),\n        'min_spo2': min_spo2,\n        'hypoxemia_episodes': hypoxemia_episodes,\n        'status': status\n    }", "input": "[98, 96, 94, 89, 87, 92, 95, 97], [0, 1, 2, 3, 4, 5, 6, 7]", "output": "{'mean_spo2': 93.5, 'min_spo2': 87, 'hypoxemia_episodes': 2, 'status': 'Warning - Hypoxemia episodes detected'}", "imports": ["import matplotlib.pyplot as plt", "import numpy as np"], "original_snippet": "def f(spo2_values, timestamps):\n    # SpO2 (Oxygen Saturation) Trend Analysis\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Plot SpO2 trend\n    plt.figure(figsize=(10, 6))\n    plt.plot(timestamps, spo2_values, 'b-', linewidth=2, marker='o', markersize=6)\n    plt.axhline(y=95, color='g', linestyle='--', alpha=0.7, label='Normal threshold (95%)')\n    plt.axhline(y=90, color='orange', linestyle='--', alpha=0.7, label='Hypoxemia threshold (90%)')\n    plt.axhline(y=85, color='r', linestyle='--', alpha=0.7, label='Severe hypoxemia (85%)')\n    \n    plt.title('SpO2 Trend Over Time')\n    plt.xlabel('Time (hours)')\n    plt.ylabel('SpO2 (%)')\n    plt.ylim(75, 100)\n    plt.grid(True, alpha=0.3)\n    plt.legend()\n    \n    # Calculate statistics\n    mean_spo2 = np.mean(spo2_values)\n    min_spo2 = min(spo2_values)\n    hypoxemia_episodes = sum(1 for x in spo2_values if x < 90)\n    \n    # Assessment\n    if min_spo2 < 85:\n        status = 'Critical - Severe hypoxemia detected'\n    elif hypoxemia_episodes > 0:\n        status = 'Warning - Hypoxemia episodes detected'\n    elif mean_spo2 < 95:\n        status = 'Monitoring - Below normal threshold'\n    else:\n        status = 'Normal oxygen saturation'\n    \n    return {\n        'mean_spo2': round(mean_spo2, 1),\n        'min_spo2': min_spo2,\n        'hypoxemia_episodes': hypoxemia_episodes,\n        'status': status\n    }", "composite_functions": []} 